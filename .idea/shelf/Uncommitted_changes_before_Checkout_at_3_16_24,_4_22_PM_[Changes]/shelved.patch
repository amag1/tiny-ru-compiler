Index: src/main/java/lexical/Executor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package lexical;\n\nimport exceptions.lexical.LexicalException;\nimport reader.FileReader;\nimport reader.StringReader;\nimport logger.ConsoleLogger;\nimport logger.Logger;\n\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\npublic class Executor {\n    public static void main(String[] args) {\n        Logger log = new ConsoleLogger();\n        try {\n            Lexical lexical = new LexicalAnalyzer(new StringReader(\"\" + (char) (-1)));\n\n\n            List<Token> tokens = new ArrayList<Token>();\n            if (!lexical.isEndOfFile()) {\n                Token token = lexical.nextToken();\n                while (token != null) {\n                    tokens.add(token);\n                    token = lexical.nextToken();\n\n                }\n            }\n            log.LogLexicSuccess(tokens);\n        } catch (LexicalException e) {\n            log.LogLexicError(e);\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/lexical/Executor.java b/src/main/java/lexical/Executor.java
--- a/src/main/java/lexical/Executor.java	
+++ b/src/main/java/lexical/Executor.java	
@@ -9,11 +9,12 @@
 import java.io.FileNotFoundException;
 import java.util.List;
 import java.util.ArrayList;
+
 public class Executor {
     public static void main(String[] args) {
         Logger log = new ConsoleLogger();
         try {
-            Lexical lexical = new LexicalAnalyzer(new StringReader("" + (char) (-1)));
+            Lexical lexical = new LexicalAnalyzer(new FileReader("/home/andres/IdeaProjects/tiny-ru-compiler/src/main/java/lexical/test/test.ru"));
 
 
             List<Token> tokens = new ArrayList<Token>();
@@ -26,6 +27,7 @@
                 }
             }
             log.LogLexicSuccess(tokens);
+        } catch (FileNotFoundException e) {
         } catch (LexicalException e) {
             log.LogLexicError(e);
         }
Index: .idea/codeStyles/codeStyleConfig.xml
===================================================================
diff --git a/.idea/codeStyles/codeStyleConfig.xml b/.idea/codeStyles/codeStyleConfig.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/codeStyles/codeStyleConfig.xml	
@@ -0,0 +1,5 @@
+<component name="ProjectCodeStyleConfiguration">
+  <state>
+    <option name="USE_PER_PROJECT_SETTINGS" value="true" />
+  </state>
+</component>
\ No newline at end of file
Index: .idea/copilot/chatSessions/xd.lck
===================================================================
diff --git a/.idea/copilot/chatSessions/xd.lck b/.idea/copilot/chatSessions/xd.lck
new file mode 100644
--- /dev/null	
+++ b/.idea/copilot/chatSessions/xd.lck	
@@ -0,0 +1,47 @@
+Private property of Exodus: 3447@fedora
+
+jetbrains.exodus.io.LockingManager.lock(LockingManager.kt:88)
+jetbrains.exodus.io.LockingManager.lock(LockingManager.kt:39)
+jetbrains.exodus.io.FileDataWriter.lock(FileDataWriter.kt:70)
+jetbrains.exodus.log.Log.tryLock(Log.kt:804)
+jetbrains.exodus.log.Log.<init>(Log.kt:117)
+jetbrains.exodus.env.Environments.newLogInstance(Environments.kt:117)
+jetbrains.exodus.env.Environments.newLogInstance(Environments.kt:81)
+jetbrains.exodus.env.Environments.newLogInstance(Environments.kt:77)
+jetbrains.exodus.env.Environments$newInstance$4.invoke(Environments.kt:46)
+jetbrains.exodus.env.Environments$newInstance$4.invoke(Environments.kt:46)
+jetbrains.exodus.env.Environments.prepare(Environments.kt:120)
+jetbrains.exodus.env.Environments.newInstance(Environments.kt:46)
+kotlinx.dnq.store.container.EntityStoreHelperKt.createTransientEntityStore(EntityStoreHelper.kt:40)
+kotlinx.dnq.store.container.EntityStoreHelperKt.createTransientEntityStore(EntityStoreHelper.kt:31)
+kotlinx.dnq.store.container.EntityStoreHelperKt.createTransientEntityStore$default(EntityStoreHelper.kt:30)
+com.github.copilot.chat.session.persistence.xodus.XdChatSessionPersistenceService.initStore(XdChatSessionPersistenceService.kt:115)
+com.github.copilot.chat.session.persistence.xodus.XdChatSessionPersistenceService.<init>(XdChatSessionPersistenceService.kt:22)
+com.github.copilot.chat.session.persistence.xodus.XdChatSessionPersistenceService.<init>(XdChatSessionPersistenceService.kt:15)
+com.github.copilot.chat.session.persistence.ChatSessionPersistenceServiceKt.ChatSessionPersistenceService(ChatSessionPersistenceService.kt:43)
+com.github.copilot.chat.session.persistence.ChatSessionPersistenceServiceKt.chatSessionsPersistenceService(ChatSessionPersistenceService.kt:53)
+com.github.copilot.chat.session.ChatSessionManager.<init>(ChatSessionManager.kt:45)
+com.github.copilot.chat.session.ChatSessionManager.<init>(ChatSessionManager.kt:25)
+com.github.copilot.chat.window.CopilotChatToolWindow.onCopilotReady(CopilotChatToolWindow.kt:133)
+com.github.copilot.chat.window.CopilotChatToolWindow.access$onCopilotReady(CopilotChatToolWindow.kt:40)
+com.github.copilot.chat.window.CopilotChatToolWindow$initCopilotStatusListener$1.invoke(CopilotChatToolWindow.kt:118)
+com.github.copilot.chat.window.CopilotChatToolWindow$initCopilotStatusListener$1.invoke(CopilotChatToolWindow.kt:115)
+com.github.copilot.status.CopilotAuthStatusKt.subscribeToCopilotAuthStatus$lambda$0(CopilotAuthStatus.kt:44)
+com.intellij.util.messages.impl.MessageBusImplKt.invokeMethod(MessageBusImpl.kt:700)
+com.intellij.util.messages.impl.MessageBusImplKt.invokeListener(MessageBusImpl.kt:664)
+com.intellij.util.messages.impl.MessageBusImplKt.deliverMessage(MessageBusImpl.kt:423)
+com.intellij.util.messages.impl.MessageBusImplKt.pumpWaiting(MessageBusImpl.kt:402)
+com.intellij.util.messages.impl.MessageBusImplKt.access$pumpWaiting(MessageBusImpl.kt:1)
+com.intellij.util.messages.impl.MessagePublisher.invoke(MessageBusImpl.kt:461)
+jdk.proxy6/jdk.proxy6.$Proxy153.onCopilotStatus(Unknown Source)
+com.github.copilot.status.CopilotStatusService.notifyApplication(CopilotStatusService.java:76)
+com.github.copilot.status.CopilotStatusService.notifyApplication(CopilotStatusService.java:64)
+com.github.copilot.github.GitHubAuthStartupActivity.handleAuthNotifications(GitHubAuthStartupActivity.java:54)
+com.github.copilot.github.GitHubAuthStartupActivity.execute(GitHubAuthStartupActivity.java:35)
+com.intellij.ide.startup.impl.StartupManagerImplKt$launchActivity$1.invokeSuspend(StartupManagerImpl.kt:482)
+kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
+kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:108)
+kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
+kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:793)
+kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:697)
+kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:684)
Index: src/main/java/lexical/test/test.ru
===================================================================
diff --git a/src/main/java/lexical/test/test.ru b/src/main/java/lexical/test/test.ru
new file mode 100644
--- /dev/null	
+++ b/src/main/java/lexical/test/test.ru	
@@ -0,0 +1,51 @@
+struct Fibonacci {
+Int suma;
+Int i,j;
+}
+impl Fibo_nacci {
+fn sucesion_fib(Int n)-> Int{
+i=0; j=0; suma=0;
+while (i<= n){
+if (i==0){
+(imprimo_numero(i));
+(imprimo_sucesion(suma));
+}
+else
+if(i==1){
+(imprimo_numero(i));
+suma=suma+i;
+(imprimo_sucesion(suma));
+}
+else{
+(imprimo_numero(i));
+suma=suma+j;
+j=suma;
+(imprimo_sucesion(suma));
+}
+(++i);
+}
+ret suma;
+}
+.(){
+i=0; /? inicializo i
+j=0; /? inicializo j
+suma=0; /? inicializo suma
+}
+fn imprimo_numero(Int num) -> void{
+(IO.out_str("f_"));
+(IO.out_int(num));
+(IO.out_str("="));
+}
+fn imprimo_sucesion(Int s) -> void{
+/?El valor es:
+(IO.out_int(s));
+(IO.out_str("\n"));
+}
+}
+start{
+Fibonacci fib;
+Int n;
+fib = new Fibonacci();
+n = IO.in_int();
+(IO.out_int(fib.sucesion_fib(n)));
+}
\ No newline at end of file
